#+OPTIONS: toc:nil
#+OPTIONS: headlines:nil
* DONE Gas Analysis investigation 
  DEADLINE: <2019-04-01 Mon>
* TODO Get Jimmy Swage and Zero tier instructions.
* DONE Make list of Compressor parameters 
  DEADLINE: <2020-05-04 Mon>
* TODO Riverview CSManual Entry Data 10.7.8.106
4 Compressors
** TODO Runtime
*** Runtime Script
  #+BEGIN_SRC dhall


  { id = None
  , outputPID = 352849
  , inputPIDs = [ 348166, 349747, 416832, 348142 ]
  , script =
      ''
      /*
      Script to calculate the percent of time a parameter is above a threshold
      very useful for UPTIME calculations
      */
      statusIndex := 1;
      contractHourIndex := 2;
      timezoneIndex := 3;
      thresholdIndex := 4;
    
    
    
      timezone := latestInput(timezoneIndex);
    
      if(isUnit(timezone)) then
      timezone := -6;
      else
      timezone := round(timezone);
      end_if;
    
      lastMidnightCST := day(now - hours(timezone))-hours(timezone); 
    
    
    
    
      contractHour := latestInput(contractHourIndex);
    
      if(isUnit(contractHour)) then
      contractHour := 9;
      else
      contractHour := round(contractHour);
      end_if;
    
    
    
    
    
      endTime := lastMidnightCST + hours(contractHour);
    
      threshold := latestInput(thresholdIndex);
    
      if(isUnit(threshold)) then
         threshold := 10.0;
      end_if;
    
    
      acc := 0.0;
      count := 0.0;
      unit := 0.0;
      WITH t FROM endTime - days(1) TO endTime EVERY minutes(1) DO
        x := input(statusIndex,t);
        IF not(isUnit(x))
          THEN
            count := count + 1.0;
            if(x > threshold) then
               acc := acc + 1.0;
           
            end_if;       
          ELSE
          
               unit := unit + 1.0;
        END_IF;
      END_LOOP ;
    
      if(count == 0.0) then 
    
      output := 0.0;
      else 
    
      output := acc/count*24.0;
      end_if;
      ''
  , stepSize = 100
  , schedule =
      < OnInputChange
      | Periodic : Integer
      | OnCronSchedule : Text
      >.OnCronSchedule
        "0 9 1/1 * *"
  , enabled = True
  , token = None Text
  }

  #+END_SRC
  
** TODO Downtime
*** Downtime Script
  #+BEGIN_SRC dhall

  { id = None, outputPID = 352864, inputPIDs = [ 352849 ]
  , script =
      ''
      dayHours := 24.0;
    
      runHours := latestInput(1);
    
      if(isUnit(runHours)) then
    
      output := ();
    
      else
    
    
      output := dayHours - runHours;
    
      end_if;''
  , stepSize = 2048
  , schedule =
      < OnInputChange | Periodic : Integer | OnCronSchedule : Text >.OnInputChange
  , enabled = True
  , token = None Text
  }
  #+END_SRC

* DONE Hellcat CSManual Entry Data 10.7.8.38
3 Compressors
** DONE Runtime
** DONE Downtime  
* DONE Meridian CSManual Entry Data 	10.7.6.93
5 Comrpessors
** TODO Runtime
** TODO Downtime  
*** Compressor 1 Downtime Script
*** Compressor 2 Downtime Script
*** Compressor 3 Downtime Script    
*** Compressor 4 Downtime Script
*** Compressor 5 Downtime Script
* DONE Spitfire CSManual Entry Data 10.7.8.185
** DONE Runtime
** DONE Downtime
*** DONE Compressor 1 Downtime Script
  #+BEGIN_SRC dhall

  { id = None, outputPID = 352864, inputPIDs = [ 352849 ]
  , script =
      ''
      dayHours := 24.0;
    
      runHours := latestInput(1);
    
      if(isUnit(runHours)) then
    
      output := ();
    
      else
    
    
      output := dayHours - runHours;
    
      end_if;''
  , stepSize = 2048
  , schedule =
      < OnInputChange | Periodic : Integer | OnCronSchedule : Text >.OnInputChange
  , enabled = True
  , token = None Text
  }
  #+END_SRC

*** DONE Compressor 2 Downtime Script
  #+BEGIN_SRC dhall

  { id = None, outputPID = 352864, inputPIDs = [ 352849 ]
  , script =
      ''
      dayHours := 24.0;
    
      runHours := latestInput(1);
    
      if(isUnit(runHours)) then
    
      output := ();
    
      else
    
    
      output := dayHours - runHours;
    
      end_if;''
  , stepSize = 2048
  , schedule =
      < OnInputChange | Periodic : Integer | OnCronSchedule : Text >.OnInputChange
  , enabled = True
  , token = None Text
  }
  #+END_SRC

*** DONE Compressor 3 Downtime Script
*** DONE Compressor 4 Downtime Script
[[ ~/Documents/customers/connect/compressor-runtime/spitfire-compressor-4-downtime.dhall][Compressor Downtime]]

* DONE KiloManual Entry Data 10.7.9.47
* TODO Centrahoma CSManual Entry Data 10.7.8.163
* DONE Bonanza CSManual Entry Data 10.7.7.72
* TODO Riverview CSManual Entry Data 10.7.8.106

* Runtime Script
#+BEGIN_SRC dhall


{ id = None
, outputPID = 352849
, inputPIDs = [ 348166, 349747, 416832, 348142 ]
, script =
    ''
    /*
    Script to calculate the percent of time a parameter is above a threshold
    very useful for UPTIME calculations
    */
    statusIndex := 1;
    contractHourIndex := 2;
    timezoneIndex := 3;
    thresholdIndex := 4;
    
    
    
    timezone := latestInput(timezoneIndex);
    
    if(isUnit(timezone)) then
    timezone := -6;
    else
    timezone := round(timezone);
    end_if;
    
    lastMidnightCST := day(now - hours(timezone))-hours(timezone); 
    
    
    
    
    contractHour := latestInput(contractHourIndex);
    
    if(isUnit(contractHour)) then
    contractHour := 9;
    else
    contractHour := round(contractHour);
    end_if;
    
    
    
    
    
    endTime := lastMidnightCST + hours(contractHour);
    
    threshold := latestInput(thresholdIndex);
    
    if(isUnit(threshold)) then
       threshold := 10.0;
    end_if;
    
    
    acc := 0.0;
    count := 0.0;
    unit := 0.0;
    WITH t FROM endTime - days(1) TO endTime EVERY minutes(1) DO
      x := input(statusIndex,t);
      IF not(isUnit(x))
        THEN
          count := count + 1.0;
          if(x > threshold) then
             acc := acc + 1.0;
           
          end_if;       
        ELSE
          
             unit := unit + 1.0;
      END_IF;
    END_LOOP ;
    
    if(count == 0.0) then 
    
    output := 0.0;
    else 
    
    output := acc/count*24.0;
    end_if;
    ''
, stepSize = 100
, schedule =
    < OnInputChange
    | Periodic : Integer
    | OnCronSchedule : Text
    >.OnCronSchedule
      "0 9 1/1 * *"
, enabled = True
, token = None Text
}

#+END_SRC

* Downtime Script
#+BEGIN_SRC dhall

{ id = None{}, outputPID = 352864, inputPIDs = [ 352849 ]
, script =
    ''
    dayHours := 24.0;
    
    runHours := latestInput(1);
    
    if(isUnit(runHours)) then
    
    output := ();
    
    else
    
    
    output := dayHours - runHours;
    
    end_if;''
, stepSize = 2048
, schedule =
    < OnInputChange | Periodic : Integer | OnCronSchedule : Text >.OnInputChange
, enabled = True
, token = None Text
}
#+END_SRC

	352867	Compressor 4 Down Time	

    Connect MidstreamSpitfire CSManual Entry Data

	0	2020-02-04T16:45:46-06:00
		352866	Compressor 3 Down Time	

    Connect MidstreamSpitfire CSManual Entry Data

	0	2020-02-04T16:45:43-06:00
		352865	Compressor 2 Down Time	

    Connect MidstreamSpitfire CSManual Entry Data

	0	2020-02-04T16:45:41-06:00
		352864	Compressor 1 Down Time

* DONE Cell E16 is still showing an equation.  We want it to be the Riverview CS Fuel Yesterday Total.
  DEADLINE: <2020-08-16 Sun>
* DONE Cell E29 doesn’t look right.  Yesterday’s total for FIT3100 looks to be 172 and not 252.
  DEADLINE: <2020-08-16 Sun>
* DONE Can you check to see why the Bonanza Suction Pressure is reading 0?  The rest look right.
  DEADLINE: <2020-08-16 Sun>
* DONE The pressures in cells M9, M15, M18, M20, M25, M28 look like they are pulling in the flow number instead of pressure
  DEADLINE: <2020-08-16 Sun>
* DONE Cell F20 still seems to be an equation and needs to be the yesterday’s volume from the discharge meter
  DEADLINE: <2020-08-16 Sun>
* DONE We still need to add the Stanberry GP Inlet Meter Pressure to cell C29
  DEADLINE: <2020-08-16 Sun>

